-Project Description: The Sales Performance Analysis project is a comprehensive data analysis project that focuses on analyzing sales data using SQL and a sales dataset sourced from Kaggle. The project aims to extract valuable insights, identify sales trends, evaluate product performance, segment customers, and analyze regional sales patterns. By leveraging SQL queries and data visualization techniques, the project provides actionable recommendations to improve sales strategies, optimize performance, and drive business growth.


-Key Features:
  --SQL-based Analysis: Utilize SQL queries to extract, manipulate, and analyze the sales dataset.
  --Comprehensive Sales Metrics: Analyze sales revenue, product performance, customer behavior, and regional sales patterns.
  --Data Visualization: Utilize Tableau to create interactive dashboards and visualizations to present insights in a clear and impactful 
    manner.
  --Complex SQL Queries: Develop advanced SQL queries to answer specific research questions and derive meaningful insights.
  --Performance Optimization: Identify areas of improvement, optimize sales strategies, and maximize revenue based on the analysis findings.

--SQL Code:

1. What are the overall sales trends over time? Can you identify any seasonality or growth patterns?

SELECT DATE_TRUNC('month', order_date) AS month, SUM(sales) AS total_sales
FROM sales_data
GROUP BY month
ORDER BY month;

2. Which products are the top sellers in terms of revenue and quantity? Are there any specific product categories or subcategories that stand out?

SELECT product_category, product_subcategory, SUM(quantity) AS total_quantity, SUM(sales) AS total_revenue
FROM sales_data
GROUP BY product_category, product_subcategory
ORDER BY total_revenue DESC, total_quantity DESC
LIMIT 10;

3. Identify the key customer segments based on their purchasing behavior or order frequency?

SELECT CASE 
           WHEN order_count >= 10 THEN 'Highly Active'
           WHEN order_count >= 5 THEN 'Active'
           ELSE 'Inactive'
       END AS customer_segment,
       COUNT(*) AS customer_count
FROM (
    SELECT customer_id, COUNT(DISTINCT order_id) AS order_count
    FROM sales_data
    GROUP BY customer_id
) AS customer_orders
GROUP BY customer_segment;

4. What are the regional sales patterns? Are there specific geographic locations that contribute significantly to sales?

SELECT region, SUM(sales) AS total_sales
FROM sales_data
GROUP BY region
ORDER BY total_sales DESC;

5. How does sales performance vary across different sales representatives? Can you identify the top-performing salespeople?

SELECT sales_representative, SUM(sales) AS total_sales
FROM sales_data
GROUP BY sales_representative
ORDER BY total_sales DESC
LIMIT 5;

6. Determine the average order value and analyze any changes or trends over time?

SELECT DATE_TRUNC('month', order_date) AS month, AVG(order_value) AS average_order_value
FROM sales_data
GROUP BY month
ORDER BY month;

7. Are there any significant correlations between discounts offered and sales revenue?

SELECT discount, SUM(sales) AS total_sales
FROM sales_data
GROUP BY discount
ORDER BY discount;

8. How does the sales performance vary by product category or subcategory? Are there any underperforming categories that require attention?

SELECT product_category, product_subcategory, SUM(sales) AS total_sales
FROM sales_data
GROUP BY product_category, product_subcategory
ORDER BY total_sales;

9. Identify any trends or patterns in customer purchasing behavior, such as repeat purchases or cross-selling opportunities?

SELECT customer_id, COUNT(DISTINCT order_id) AS unique_orders
FROM sales_data
GROUP BY customer_id
HAVING COUNT(DISTINCT order_id) > 1
ORDER BY unique_orders DESC;

10. How do sales metrics differ between different customer segments, such as new customers versus existing customers?

SELECT CASE 
           WHEN customer_since < DATE_TRUNC('month', NOW() - INTERVAL '6 months') THEN 'Existing Customer'
           ELSE 'New Customer'
       END AS customer_segment,
       AVG(sales) AS average_sales,
       AVG(quantity) AS average_quantity
FROM sales_data
GROUP BY customer_segment;
